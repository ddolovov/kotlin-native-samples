plugins {
    id 'kotlin-multiplatform'
}

def winCompiledResourceFile = file("$buildDir/compiledWindowsResources/Tetris.res")

kotlin {
    presets {
        // Determine host preset.
        MPPTools.defaultHostPreset(project, [macosX64, linuxX64, mingwX64, linuxArm32Hfp /* aka RaspberryPi */ ])
    }

    targets {
        fromPreset(hostPreset, 'tetris') {
            compilations.main.outputKinds 'executable'
            compilations.main.entryPoint 'sample.tetris.main'

            switch (hostPreset) {
                case presets.macosX64:
                    compilations.main.linkerOpts "-F ${MPPTools.localFrameworksPath()}",
                            "-F ${MPPTools.systemFrameworksPath()}",
                            '-framework SDL2'
                    // Use this line instead of the previous one if you've got a 'No SDL-framework' error:
                    //compilations.main.linkerOpts '-L/opt/local/lib', '-L/usr/local/lib', '-lSDL2'
                    break
                case presets.linuxX64:
                    compilations.main.linkerOpts '-L/usr/lib64', '-L/usr/lib/x86_64-linux-gnu', '-lSDL2'
                    break
                case presets.mingwX64:
                    compilations.main.linkerOpts winCompiledResourceFile.path,
                            "-L${MPPTools.mingwPath()}/lib",
                            '-Wl,-Bstatic',
                            '-lstdc++',
                            '-static',
                            '-lSDL2',
                            '-limm32',
                            '-lole32',
                            '-loleaut32',
                            '-lversion',
                            '-lwinmm',
                            '-mwindows'
                    break
                case presets.linuxArm32Hfp:
                    compilations.main.linkerOpts '-lSDL2'
                    break
            }

            compilations.main.cinterops {
                sdl {
                    switch (hostPreset) {
                        case presets.macosX64:
                            includeDirs "${MPPTools.localFrameworksPath()}/SDL2.framework/Headers",
                                    "${MPPTools.systemFrameworksPath()}/SDL2.framework/Headers",
                                    '/opt/local/include/SDL2',
                                    '/usr/local/include/SDL2'
                            break
                        case presets.linuxX64:
                            includeDirs '/usr/include/SDL2'
                            break
                        case presets.mingwX64:
                            includeDirs "${MPPTools.mingwPath()}/include/SDL2"
                            break
                        case presets.linuxArm32Hfp:
                            includeDirs "${MPPTools.kotlinNativeDataPath()}/dependencies/target-sysroot-1-raspberrypi/usr/include/SDL2"
                            break
                    }
                }
            }
        }
    }
}

if (hostPreset == kotlin.presets.mingwX64) {
    tasks.create('compileWindowsResources', Exec) {
        def winResourceFile = kotlin.sourceSets.tetrisMain.resources.files.find { it.name == 'Tetris.rc' }
        def windresDir = "${MPPTools.kotlinNativeDataPath()}/dependencies/msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1/bin"
        def path = System.getenv('PATH')

        commandLine "$windresDir/windres", winResourceFile, '-O', 'coff', '-o', winCompiledResourceFile
        environment 'PATH', "$windresDir;$path"

        inputs.file winResourceFile
        outputs.file winCompiledResourceFile
    }
}

MPPTools.createRunTask(project, 'runProgram', kotlin.targets.tetris)

afterEvaluate {
    kotlin.targets.tetris.compilations.main { mainCompilation ->
        def linkTasks = ['release', 'debug']
                .collect { mainCompilation.findLinkTask('executable', it) }
                .findAll { it != null }

        def compileWindowsResourcesTask = tasks.findByName('compileWindowsResources')

        linkTasks.each { task ->
            if (compileWindowsResourcesTask != null)
                task.dependsOn compileWindowsResourcesTask

            task.doLast {
                copy {
                    from kotlin.sourceSets.tetrisMain.resources
                    into task.outputFile.get().parentFile
                    exclude '*.rc'
                }
            }
        }
    }
}
