import org.jetbrains.kotlin.konan.target.HostManager

buildscript {
    ext.kotlin_version = '1.3.0-rc-116'

    repositories {
        mavenCentral()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }
}

// Short-cuts for detecting the host OS.
def isMacos() { System.getProperty('os.name') == 'Mac OS X' }
def isLinux() { System.getProperty('os.name') == 'Linux' }
def isWindows() { System.getProperty('os.name').startsWith('Windows') }

// A short-cut for evaluation of the default host Kotlin/Native preset.
def defaultHostPreset(
        def subproject,
        def whitelist = [subproject.kotlin.presets.macosX64, subproject.kotlin.presets.linuxX64, subproject.kotlin.presets.mingwX64]) {

    if (whitelist.isEmpty()) {
        throw new Exception("Preset whitelist must not be empty in Kotlin/Native ${subproject.displayName}.")
    }

    def hostOs = System.getProperty('os.name')
    def preset = null

    if (isMacos()) {
        preset = subproject.kotlin.presets.macosX64
    } else if (isLinux()) {
        preset = subproject.kotlin.presets.linuxX64
    } else if (isWindows()) {
        preset = subproject.kotlin.presets.mingwX64
    }

    if (preset != null && !whitelist.contains(preset)) {
        preset = null
    }

    if (preset == null) {
        throw new Exception("Host OS '$hostOs' is not supported in Kotlin/Native ${subproject.displayName}.")
    }

    subproject.ext.hostPreset = preset

    return preset
}

// A short-cut to add a Kotlin/Native run task.
def createRunTask(def subproject, String name, def target, Closure configureClosure = {}) {
    def task = subproject.tasks.create(name, RunKotlinNativeTask, subproject, target)
    task.configure(configureClosure)
    return task
}

class RunKotlinNativeTask extends DefaultTask {
    private final def myProject
    private final def myTarget

    String buildType = 'release'
    private List<String> myArgs = []

    void args(Object... args) {
        this.myArgs = args.each { it.toString() }
    }

    @javax.inject.Inject
    RunKotlinNativeTask(def project, def target) {
        this.myProject = project
        this.myTarget = target
    }

    Task configure(Closure configureClosure) {
        super.configure(configureClosure)
        this.dependsOn("link${buildType.capitalize()}Executable${myTarget.targetName.capitalize()}")
    }

    @TaskAction
    void run() {
        def programFile = myTarget.compilations.main.getBinary('EXECUTABLE', buildType)
        def arguments = myArgs
        myProject.exec {
            executable programFile
            args arguments
        }
    }
}
